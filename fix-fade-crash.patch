From 9e44932c0fa03f296dde5a638b682b9638a7d450 Mon Sep 17 00:00:00 2001
From: Chris Coulson <chrisccoulson@googlemail.com>
Date: Mon, 17 May 2010 21:49:16 +0100
Subject: [PATCH 1/2] Don't crash on systems that don't support XF86VM or XRANDR gamma fade

Test if fade is supported on each screen before calling the fade_setup
virtual function.

Fixes https://bugzilla.gnome.org/show_bug.cgi?id=618925
---
 src/gs-fade.c |    8 +++++---
 1 files changed, 5 insertions(+), 3 deletions(-)

diff --git a/src/gs-fade.c b/src/gs-fade.c
index 506cc3d..034f47d 100644
--- a/src/gs-fade.c
+++ b/src/gs-fade.c
@@ -702,9 +702,11 @@ gs_fade_start (GSFade *fade,
 
         for (i = 0; i < fade->priv->num_screens; i++) {
                 screen_priv = &fade->priv->screen_priv[i];
-                res = screen_priv->fade_setup (fade, i);
-                if (res == FALSE)
-                        return;
+                if (screen_priv->fade_type != FADE_TYPE_NONE) {
+                        res = screen_priv->fade_setup (fade, i);
+                        if (res == FALSE)
+                                return;
+                }
         }
 
         if (fade->priv->timer_id > 0) {
-- 
1.7.1


From 178f1446a494e65100674c54def8d6145cc4a8c6 Mon Sep 17 00:00:00 2001
From: Richard Fuller <bugzilla@rpfuller.org>
Date: Fri, 29 Jul 2011 16:42:29 -0400
Subject: [PATCH 2/2] Add fade type checking to reset and finalize

This makes test-fade in the src directory complete
successfully on systems that don't support either of the
fade methods (e.g. NX servers.).
---
 src/gs-fade.c |   18 ++++++++++++++----
 1 files changed, 14 insertions(+), 4 deletions(-)

diff --git a/src/gs-fade.c b/src/gs-fade.c
index 034f47d..b03f172 100644
--- a/src/gs-fade.c
+++ b/src/gs-fade.c
@@ -822,6 +822,7 @@ gs_fade_sync (GSFade        *fade,
 void
 gs_fade_reset (GSFade *fade)
 {
+        struct GSFadeScreenPrivate *screen_priv;
         int i;
         g_return_if_fail (GS_IS_FADE (fade));
 
@@ -835,8 +836,12 @@ gs_fade_reset (GSFade *fade)
 
         gs_fade_set_alpha (fade, fade->priv->current_alpha);
 
-        for (i = 0; i < fade->priv->num_screens; i++)
-                fade->priv->screen_priv[i].fade_finish (fade, i);
+        for (i = 0; i < fade->priv->num_screens; i++) {
+                screen_priv = &fade->priv->screen_priv[i];
+
+                if (screen_priv->fade_type != FADE_TYPE_NONE)
+                        fade->priv->screen_priv[i].fade_finish (fade, i);
+        }
 }
 
 static void
@@ -887,6 +892,7 @@ gs_fade_init (GSFade *fade)
 static void
 gs_fade_finalize (GObject *object)
 {
+        struct GSFadeScreenPrivate *screen_priv;
         GSFade *fade;
         int i;
 
@@ -897,8 +903,12 @@ gs_fade_finalize (GObject *object)
 
         g_return_if_fail (fade->priv != NULL);
 
-        for (i = 0; i < fade->priv->num_screens; i++)
-                fade->priv->screen_priv[i].fade_finish(fade, i);
+        for (i = 0; i < fade->priv->num_screens; i++) {
+                screen_priv = &fade->priv->screen_priv[i];
+
+                if (screen_priv->fade_type != FADE_TYPE_NONE)
+                        fade->priv->screen_priv[i].fade_finish(fade, i);
+        }
 
         if (fade->priv->screen_priv) {
                 for (i = 0; i < fade->priv->num_screens; i++) {
-- 
1.7.1

